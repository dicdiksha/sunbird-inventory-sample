# ------------------------------------------------------------------------------------------------------------ #
# Mandatorty variables - DO NOT LEAVE ANYTHING BLANK #
core_vault_sunbird_encryption_key: "12345"       # Random string to encrypt data
core_vault_postgres_password: "YOUR-POSTGRES-PASSWORD"           # Update same password in dp secrets dp_vault_pgdb_admin_password  variable
core_vault_dp_pgdb_password: "YOUR-DP-POSTGRES-PASSWORD"       #update same password in dp secrets dp_vault_pgdb_password  variable
core_vault_sunbird_azure_storage_key: "change.azure.storage.account.key"
core_vault_docker_registry_url: "https://hyd.ocir.io"      # for docker hub "https://index.docker.io/v1"
core_vault_docker_registry_user: "YOUR-OCIR-USERNAME"
core_vault_docker_registry_password: "YOUR-OCIR-TOKEN"

# Run the below command in shell
# date +'%Y-%m-%dT%H:%m:%SZ' -d '+1 year'
# sas_token=?`az storage account generate-sas --account-name "{{ azure_plugin_storage_account_name }}" --account-key "{{ azure_plugin_storage_account_key }}" --expiry $sas_expire_time --https-only --permissions acdlpruw --resource-types sco --services bfqt | xargs`
# generate a sas for the blob for entire storage accout with write and read access
sunbird_artifact_storage_account_sas: "change.azure.storage.account.sas"                        # SAS token value generated from above command
sunbird_public_storage_account_sas: "change.azure.storage.account.sas"                          # SAS token value generated from above command
sunbird_management_storage_account_sas: "change.azure.storage.account.sas"                      # SAS token value generated from above command

sunbird_public_storage_account_key: "change.azure.storage.account.key"
sunbird_private_storage_account_key: "change.azure.storage.account.key"
sunbird_management_storage_account_key: "change.azure.storage.account.key"
sunbird_artifact_storage_account_key: "{{ sunbird_management_storage_account_key }}"

# Define the below if you are using Azure Cloud
azure_public_storage_account_key: "{{ sunbird_public_storage_account_key }}"
azure_private_storage_account_key: "{{ sunbird_private_storage_account_key }}"
azure_management_storage_account_key: "{{ sunbird_management_storage_account_key }}"
azure_artifact_storage_account_key: "{{ sunbird_artifact_storage_account_key }}"
azure_public_storage_account_sas: "{{ sunbird_public_storage_account_sas }}"
azure_management_storage_account_sas: "{{ sunbird_management_storage_account_sas }}"

# Define the below if you are using AWS Cloud
aws_management_bucket_access_key: ""
aws_artifact_bucket_access_key: ""
aws_public_bucket_access_key: ""
aws_private_bucket_access_key: ""

aws_management_bucket_secret_access_key: ""
aws_artifact_bucket_secret_access_key: ""
aws_public_bucket_secret_access_key: ""
aws_private_bucket_secret_access_key: ""

# Define the below if you are using Google Cloud
gcp_storage_service_account_name: ""
gcp_storage_key_file: ""  # gcloud service account key - refer: https://cloud.google.com/iam/docs/creating-managing-service-account-keys

## Define the below if you are using s3 compliant api in OCI

s3_storage_key: "YOUR-OCI-S3-COMPLIANT-KEY"
s3_storage_secret: "YOUR-OCI-S3-COMPLIANT-SECRET"

# The proxy key and crt values should be padded to the right by a couple of spaces
# Example:
# core_vault_proxy_site_key: |+
#    -----BEGIN PRIVATE KEY-----
#    MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDFrWgCrQPHcZ2I
#    UqvtIOY5lxlgU22+4BQbjMRN6NZn89AfWMUpRQOCoohPpTs0/JF+a20RI256gNkr
#    yxm5BleKMv9dovAUjPElrdsWsBq9XOFDzN7GJnWpyB7oFYOoqrbRNrvL/dTP/op/
#    -----END PRIVATE KEY-----
core_vault_proxy_site_key: |+
  -----BEGIN PRIVATE KEY-----
  YOUR-SSL-CERT-PRIVATE-KEY
  -----END PRIVATE KEY-----
core_vault_proxy_site_crt: |+
  -----BEGIN CERTIFICATE-----
  YOUR-SSL-CERT-WITH-FULL-CERT-CHAIN
  -----END CERTIFICATE-----

# Take the jwt token of api-admin consumer from Jenkins job console output after running OnboardConsumers - Use the same value in DP secrets.yml also for the variable sunbird_api_auth_token
core_vault_sunbird_api_auth_token: YOUR-KEYCLOAK-JWT-TOKEN

# Keycloak client secret uuids
# You can generate unique ids using the below command
# sudo apt install uuid-runtime
# uuidgen
sunbird_trampoline_android_keycloak_secret: "YOUR-T-ANDROID-SECRET"               # Keycloak trampoline-android client secret
sunbird_trampoline_desktop_keycloak_secret: "YOUR-T-DESKTOP-SECRET"               # Keycloak trampoline-desktop client secret
core_vault_sunbird_google_keycloak_secret: "YOUR-GOOGLE-AUTH-SECRET"                # Keycloak google-auth client secret
core_vault_nodebb_secret: "YOUR-NODEBB-SECRET"                                 # Keycloak nodebb client secret
core_vault_android_keycloak_secret: "YOUR-V-ANDROID-SECRET"                       # Keycloak android client secret
core_vault_desktop_secret: "YOUR-V-DESKTOP-SECRET"                                # Keycloak desktop client secret
sunbird_google_android_keycloak_secret: "YOUR-G-ANDROID-SECRET"                   # Keycloak google auth android client secret
sunbird_google_desktop_keycloak_secret: "YOUR-G-DESKTOP-SECRET"                   # Keycloak google auth desktop client secret
core_vault_sunbird_sso_client_secret: "YOUR-SSO-CLIENT-SECRET"                     # Keycloak lms client secret
core_vault_sunbird_trampoline_secret: "YOUR-V-T-SECRET"                     # Keycloak trampoline client secret
core_vault_sunbird_keycloak_user_federation_provider_id: "YOUR-FEDERATION-SECRET"  # Keycloak cassandra federation id
core_vault_android_secret: "YOUR-VAULT-SECRET"                                # Keycloak android client secret

# Public key of keycloak sunbird realm, update this post keycloak deployment.  See below for steps

core_vault_sunbird_sso_publickey: "YOUR-SUNBIRD-SSO-PUBLIC-KEY"
# SSH tunnel to the keycloak VM by running ssh -L 8080:<keycloak machine ip>:8080 deployer@Keycloak-VM-IP
# If you cannot tunnel directly to Keycloak VM, then tunnel to Jenkins first and then tunnel to Keycloak VM from jenkins
#
# Go to http://localhost:8080/auth/admin/master/console/#/realms/sunbird/clients -> lms -> service account roles -> Click on client roles drop down -> Select realm-management -> Select manage-users in Available Roles -> Click on Add selected
#
# Go to http://localhost:8080/auth/admin/master/console/#/realms/sunbird/keys
# Click on Public Key and update the variable
#
# Go to http://localhost:8080/auth/admin/master/console/#/realms/master/login-settings and set the Require SSL to external requests

adminutil_refresh_token_public_key_kid: "YOUR-RT-KID"   # get after keycloak deployment, go to http://localhost:8080/auth/admin/master/console/#/realms/sunbird/keys and use the Kid of the RS256 token

#SELECT value FROM component_config CC INNER JOIN component C ON(CC.component_id = C.id) WHERE C.realm_id = 'sunbird' and provider_id = 'hmac-generated' AND CC.name = 'secret';
adminutil_refresh_token_secret_key: "YOUR-RT-SECRET-KEY"  # get after Keycloak deployment from postgres using the above query

# mongodb keyfile content generated using
# 'openssl rand -base64 741'
# eg:
# mongodb_keyfile_content: |
#   dzKXABmKNvuhvsbQud1jn84BMrRJdJb92TQbDV+HVAQXt1ATBssnTIJp6DtL1c/H
#   GHjoOQBuDv1MfymFWxE10dXBlx1IG/pQDeTtC+AOrgyYvIQZNfxHIEfyLao14ZLT
#   8sV6GAlQQzJFSHGqg174iniZpiibuj8Q7zqGlJgu/4MwcOBSflTlcCbYjkBErBff
#   +XBi7hNNcPfIizB6XuYwsY59XCLH/g2S3g9aitbunyCAAQUpyFfnOvMezliFlDDh
#   surRP/lpZ1ZzHtLni2Og8dbOj4J7TLauESd/8Bq+jLzhtBpVn0HoxxF5Se/++z+I
#   ZfK4fSR2y2uyBSbQJmGZYnlRi4iTN/LGpSg2iZVzOQhUUBvBgYdWSkkYLbl2xTni
#   d+BbwGnuvSs1gPXaokKqS6IF9zUGK9V2aW0a9qRHGjv3fJXQqB7zRvc1ciJjUwpI
#   ISsbvlxmZLeDvnQJB3evf/7itSLqNwxMDybn28Ig0E5xBqGCcFbjNjvkkyZPf3YX
#   +nI/gkSLYCPTFsnFaJSBrRxMn6c4iOwU1zc7GAg9KUuqF/ttLv8SZuooRsEZQsif
#   zrxXgUHoqkx0WDZiwz91D3VD4hjwSWa3TLEFy8R9ZeSLv0sDihKlPYvW9HlQuUV8
#   O//HoEA0ajQxjRvJdTskYK6nESOrr+geM477D5Dp3ZKl01ak0HHseJGcoHoMdZOW
#   dcvAhtKZogLstrT1+qftJcsTAOMWsF4EkpoyPelutEyLrLjfzzSUKlb06x2lKxBt
#   NoOUHRhhEXe42QMSMYgtT8wE+/LfeB5IMOP1CiC1dGxBjZkZTtSYTSbcB+52H4xi
#   LhTTEp59/yS6InuJUB6ZzgLGhJoCVg8ZSgSbnngy6Yc4lJpRONlzP7l6A/ins0aA
#   6PvGBWyEAP+P+6xNVpDkrUPKVIFZDfMMCLVm1sicOgtEBInEpeqhiOygnpO5u12P
#   IeDCClMkUbhtwTpgVszUe4OA2EXo
mongodb_keyfile_content: |

# Steps to generating the Nodebb auth token
# 1. Login to Nodebb (https://<domain-name>/discussions/login) as a Admin.
# 2. Go to admin panel and click on Plugin -> Install Plugins
# 3. Go to Installed Pluging, Activate All Plugins. Click on Dashboard and Click Rebuild and Restart
# 4. Again vist Admin Panel post restart -> Click on Plugins => Write API
# 5. Under MASTER TOKENS section, click on create token button, It will generate a token.
discussionsmw_nodebb_authorization_token:    # Read the comment above to generate this key
core_vault_mail_server_password: ""                      # Email server password

# Oauth keys
core_vault_sunbird_google_oauth_clientId_portal:         # Google oauth client id
core_vault_sunbird_google_oauth_clientSecret_portal:     # Google oauth client secret
core_vault_sunbird_google_captcha_site_key_portal:  "YOUR-GOOGLE-CAPTCHA-SITE-KEY"      # Google recaptch site key
google_captcha_private_key: "YOUR-GOOGLE-CAPTCHA-PRIV-KEY"                              # Google recaptch private key
learning_content_drive_apiKey:                           # Google drive api key

# ------------------------------------------------------------------------------------------------------------ #
# Optional variables - Can be left blank if you dont plan to use the intended features
core_vault_monitor_alerts_slack_url: ""                  # Slack webhook for alerts from alertmanager
core_vault_msg_91_auth_key:                              # API key for sending OTP SMS

# Oauth for logger kibana
core_vault_kibana_google_client_id: "long-secret-to-calm-entropy-gods"                     # You can use the same outh client id that we used for portal
core_vault_kibana_google_client_secret:  "long-secret-to-calm-entropy-gods"                # You can use the same outh client secret that we used for portal

vault_core_url_shortner_access_token: ""                 # Url shortner access token if you want to shorten urls like forgot password link etc using an external service like bit.ly

### IMPORTANT! ###
### NOTE: FOR A REAL ENVIRONMENT YOU MUST CHANGE THE BELOW VALUES TO SOMETHING VERY SECRET WHICH ONLY YOU WILL KNOW! DO NOT USE THE DEFAULTS FOR REAL ENVIRONMENTS! ###
# ------------------------------------------------------------------------------------------------------------ #
# Sensible defaults which you need not change if you are just trying Sunbird - You should change these to something unique for real environments and not use the defaults

core_vault_keycloak_api_management_user_password: YOUR-KEYCLOAK-API-PASSWORD
core_vault_keystore_password: YOUR-KEYSTORE-PASSWORD                                                           # Password for encrypting data in cassandra
core_vault_sunbird_sso_username: YOUR-SUNBIRD-SSO-USERNAME                                                           # Keycloak SSO username
core_vault_sunbird_sso_password: YOUR-SUNBIRD-SSO-PASSWORD                                                           # Keycloak SSO password
core_vault_keycloak_password: YOUR-KEYCLOAK-PASSWORD                                                              # Keycloak admin password
core_vault_grafana_admin_password: YOUR-GRAFANA-ADMIN-PASSWORD                                                       # Grafana admin password
core_vault_truststore_password: YOUR-TRUSTSTORE-PASSWORD                                                          # Password for cassandra trust store
core_vault_proxy_prometheus_admin_creds: YOUR-PROMETHEUS-PASSWORD                                                   # Prometheus admin password
core_vault_postgres_username: postgres                                                           # Postgres user name
core_vault_grafana_editor_password: YOUR-GRAFANA-EDITOR-PASSWORD                                                      # Grafana editor user password

# ------------------------------------------------------------------------------------------------------------ #
# Sensible defaults which you need not change - But if you would like to change, you are free to do so

core_vault_grafana_dashboards_git_repo_url_with_credentails: "https://github.com/project-sunbird/grafana-dashboards.git"
# Changing the sessions secret value will invalidate all existing sessions.
# In order to rotate the secret without invalidating sessions, provide an array of secrets,
# with the new secret as first element of the array, and followed by previous secrets.
sunbird_portal_session_secret: "long-secret-to-calm-entropy-gods"    # Portal session secret
nodebb_admin_password: YOUR-NODEBB-ADMIN-PASSWORD                              # Nodebb admin password
core_vault_enc_entry_password: password                              # encryption password for the enc service
core_vault_enc_master_pass: password                                 # encryption password for the keys
core_vault_kibana_cookie_secret: long-secret-to-calm-entropy-gods    # Cookie secret for kibana Oauth
dp_play_http_secret_key: "long-secret-to-calm-entropy-gods"          # Random 32+ character string
core_vault_graph_passport_key: "long-secret-to-calm-entropy-gods"    # Should be same as lp_vault_graph_passport_key from KP secrets.yml
crypto_encryption_key: "long-secret-to-calm-entropy-gods" # any crypto key of 32 bit length, used by portal to encrypt and decrypt the userDetails for forgot password flow
sunbird_api_auth_token_bot: "{{ core_vault_sunbird_api_auth_token }}"


### Added as per https://github.com/orgs/Sunbird-Ed/discussions/112#discussioncomment-3509631
sunbird_anonymous_register_token: "{{core_vault_sunbird_api_auth_token}}"
sunbird_loggedin_register_token: "{{core_vault_sunbird_api_auth_token}}"
sunbird_anonymous_default_token: "{{core_vault_sunbird_api_auth_token}}"
sunbird_logged_default_token: "{{core_vault_sunbird_api_auth_token}}"

# Adding an secrets related to ML-services
# Azure token
ml_analytics_azure_sas_token: Azuretoken
# Druid project injestion data-source-spec
ml_analytics_druid_project_injestion_spec: DruidProjectIngestionSpec
ml_analytics_druid_observation_status_injestion_spec: DruidObeservationStatusIngestionSpec
# Jwt token of ML API
ml_analytics_api_access_token: ApiAccessToken
# ML authorization key
ml_analytics_api_authorization_key: ApiAuthorizationKey


### OCI Experimental
### This is added to test s3 compliant api works for Deploy/Kubernetes/Assessment
cloud_public_storage_secret: "{{s3_storage_secret}}"
cloud_private_storage_accountname: "{{s3_storage_key}}"
cloud_private_storage_secret: "{{s3_storage_secret}}"

# Define the below for configure OCI cli
oci_cli_user_ocid: "YOUR-OCI-CLI-USER-OCID"
oci_cli_region: "ap-hyderabad-1"
oci_cli_fingerprint: "YOUR-OCI-CLI-KEY-FINGERPRINT"
oci_cli_tenancy: "YOUR-OCI-TENANT-OCID"
oci_cli_key_content: |+
  -----BEGIN PRIVATE KEY-----
  YOUR-OCI-CLI-PRIVATE-KEY-REMEMBER-TO-PAD-THE-KEY
  -----END PRIVATE KEY-----
